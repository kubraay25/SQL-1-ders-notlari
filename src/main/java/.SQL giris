

                                SQL
                      (sitrakçırd kuery lenguıç)
                      Structured Query Language           -->sorgula
                      Yapilandirilmis Sorgu Dili          -->güncelle
                                                          -->sil
                                                          -->veri ekle


  SQL:Database'deki verileri sorgulamak, guncellemek, silmek veya
      yeni veri eklemek icin kullanilan bir dildir
      Butun veriler tablolarda saklanir

  SQL KOMUTLARI:

          (deyda defınişın lenguıç)
        1.)Data Definition Language (veri tanimlama dili)
           Create: Tablo olustur
           Drop:Tabloyu siler
           Alter:Tabloyu gunceller

        2.)Data Manipulatıon Language (veri kullanma dili)
           Insert:Tabloya veri ekler
           Delete:Tablodaki verileri siler
           Uptade:Tablodaki verileri gunceller

        3.)Data Query Language (veri sorgulama dili)
           Select:Tablodaki verileri listeler

        4.)Data Control Language (veri kontrol dili)
           Grant:Bir kullaniciya yetki vermek icin kullanilir
           Revoke:Bir kullaniciya verilen yetkiyi geri almak icin kullanilir




  SQL DATA TURLERİ

  String Data Turleri: Char(size):uzunlugu belli olan string datalar icin kullanılır
                       varchar(size):uzunlugu belli olmayan string datalar icin kullanilir

  Numeric Data Turleri:Numeric(p,s) p--> sayida kullanilan rakamlarin miktarini gosterir
                                    s--> ondalik kisimda kullanilan rakamlarin miktarini gosterir

                       Int:alacagi deger bellidir
                       Real:ondalikli sayilar icin kullanilir

  Date Data Turu: Date:tablodaki sutunlara tarih depolamak icin kullanilir
                  Yil,AY,Gun icerir-->YYYY-MM-dd(standart formati)



                       CONSTRAINT:keynstreit(Kisitlamalar):

   UNIQUE-->verilerin benzersiz olmasidir

   NOT NULL-->tum verilerin null icermemesidir
              bu kisitlama icin constraint ismi tanimlanamaz
              data turunden hemen sonra yazilir

   CHECK--> (kontrol etmek)bir sutuna yerlestirilebilecek deger araligini sinirlar

   FOREIGN KEY--> yabanci anahtar
              --> baska bir tablodaki Primary Key'i referans gostermek
   (forın)        icin kullanilir,boylelikle tablolar arasinda iliski kurulmus olur
              --> tekrarli degerler icerebilir
              --> null deger kabul eder
              --> bir tabloda birden fazla Foreign Key olabilir
              --> tablolar arasinda "child table" ve "parent table" vardir
              --> child table(foreign key),parent table(primary key)

   PRIMARIY KEY--> tum verilerin BENZERSIZ olmasi NULL icermemesidir (unique+not null)
   (praymeri)  --> bir veriyi kullanarak sadece bir kisiye ulasmak istiyorsak o zaman kullanilir
               --> her tabloda Primary Key olmasi zorunlu degildir
               --> bir tabloda en fazla bir tane Primary Key kullanabilirsiniz
               --> tek basina bir sutun Primary Key olma ozelligini tasimiyorsa, bu ozelligi
               elde etmek icin iki sutun birlestirilerek bir Primary Key olusturulabilir
               (Composite Key):(kımpasit)-->bileşik anahtar
               --> primary key dıs dunyadaki gercek verileri iceriyorsa NatureL Key deriz
               --> primary key dıs dunyadaki gercek verileri icermiyorsa Surrogate:surroget(vekil) Key deriz


              1-Primary Key:İlişkili tablolarda mutlaka primary key olmalıdır.
              --Bir tabloda her satır için tanımlayıcı görevi görür.
              --3 yolla primary key oluşturabiliriz

              Create table calisanlar1(
              id char(4) primary key,--1.yol *******************************************
              isim varchar(15),
              soyisim varchar(30),
              tel varchar(15)
              );

              select * from calisanlar1
              Create table calisanlar2(
              id char(4),
              isim varchar(15),
              soyisim varchar(30),
              tel varchar(15),
              primary key (id)--2. yol **********************************************
              );

              Create table calisanlar3(
              id char(4),
              isim varchar(15),
              soyisim varchar(30),
              tel varchar(15),
              constraint pk primary key (id)--3. yol **************************************
              );

   İLİSKİLİ TABLOLARLA CALİSMA:  Bire Bir İliskili Olma--> one to one relation
                                 Bire Cok İliskili olma--> one to many relation
                                 Coktan Coka Iliskili olma--> many to many relation






  SQL'de butun veriler tablolarda saklanir
  Row(Record): Tablonun her bir satirina denir
  Column(field): Tablonun her bir sutununa denir
  *****.Satir isimleri veridir ama sutun isimleri veri degildir
  *****.Sutun basliklari veri degildir
  *****.Sutun basliklerinin altindaki satirlar veridir




  İLİSKİLİ TABLOLAR --> Relational Databases
                    --> tablolarin ve iliskierin butunune SCHEMA(sema) denir
                    --> tablolar arasi iliskiler net olmalidir
                    --> tablolar arasi gecis kolay olmalidir




  DATABASE: Birbiri ile iliskili verilerin bir arada bulundugu yere denir
            Bulut sistemi de bir database'dir.Buyuk sirketler verilerini bulutta saklarlar
            İnsan beyni,telefon rehberi,bulut sistemleri vb.
            Bir kagit parcasiyla baslayip bulut sistemine kadar ilerleme gostermistir
            yani dijitallesmistir

            --> Database ile yazdigimiz verileri sql ile sorgulayabilecegiz
            --> Sql,Selenium,Apı <==> FULL STACK TEST AUTOMATİON ENGİNEER




  END To END (E2E) Testing:Database'de veriyi Selenium,Sql,Api ile olusturmus
                           olsamda yine ayni sekilde hepsini Selenium,Sql,Api ile
                           test edebilirim



  DİJİTAL DATABASE'nin AVANTAJLARİ:Yuksek miktarda bilgi depolanabilir

                                   Giris kolaydır
                                   Create:olusturma
                                   Read:okuma
                                   Uptade:degistirme
                                   Delete:silme kolayligi saglar

                                   Dataya ulasim kolaydir
                                   Guvenlidir(sifreyle erisim saglanir)



  BULUT SİSTEM: Hafizasi yuksek bilgisayarlarda yuksek hafizali bilgilerin tutulmasidir
                Amazonun insanlara sunmus oldugu bulut sistemi gibi.



  Database Management System (DBMS):Veri Tabani Yonelim Sistemi
                                    Database'e erisimi duzenler
                                    Data guvenligini saglar
                                    Create,Read,Uptade,Delete islemlerini duzenler
                                    Database'den rapor alir
                                    Bunlarin hepsini kod satirlariyla yapariz
                                    pgADMİN'de bir DBMS dir



En Cok Kullanilan DBMS'ler: SQL Server
                            MySQL
                            Oracle SQL
                            PostgreSQL




DML Grubundan ==> DELETE komutu Tablodaki Verileri Siler.
--olusturacagimiz yapi asagidaki gibidir
delete from tablo_adi where şart;




set --> guncelleme yaptigimda kullanirim



**************************    TABLODA GUNCELLEME (ALTER)    ***********************************

add column ==> yeni sutun ekleyerek tabloda güncellemeler yapar

drop column ==> mevcut olan sutunu silerek tabloda güncellemeler yapar

rename column ==> sutunun ismini degistirerek tabloda güncellemeler yapar
              ==> burda hangi ismi degistireceksek eskisi ve gunceli arasina "to"yu koyariz


rename ==> tablonun ismini degistirerek tabloda güncellemeler yapar
       ==> alter table tabloAdi rename to yeni verecegimiz isim




       ********************************* ornek gosterimler *********************************************

--> olusturdugum tabloya elemanlari ekleme:
"insert" "into" "tablo adi" "values" (satirdaki verileri aralarinda virgul olacak sekilde tek tek girerim);



--> eklenen tüm elemanlari listele:
select * from "tablo adi":


--> bir tabloda birden fazla drumu silmek istedigimizde:
delete from "tablo adi" where neyi sileceksek onun adi in(degerleri arasina virgul koyarak yazarim);



--> veya:"or",  ve:"and" kullaniriz


--> tabloyu sil dediginde
drop table "tablo adi"


--> tabloda güncelleme yapacaksam
update
tablo adi
set
neyi degistireceksem onun ismi
yerine yazacagim sey
sartim varsa where
sartim


--> tabloda guncelleme
alter table tablo_adi güncelleme;